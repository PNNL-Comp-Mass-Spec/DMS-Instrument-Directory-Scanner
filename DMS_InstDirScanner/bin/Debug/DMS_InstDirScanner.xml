<?xml version="1.0"?>
<doc>
<assembly>
<name>
DMS_InstDirScanner
</name>
</assembly>
<members>
<member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.LoadSettings">
	<summary>
 Loads manager settings from config file and database
 </summary>
	<returns>True if successful; False on error</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.LoadMgrSettingsFromFile">
	<summary>
 Loads the initial settings from application config file
 </summary>
	<returns>String dictionary containing initial settings if suceessful; NOTHING on error</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.CheckInitialSettings(System.Collections.Specialized.StringDictionary)">
	<summary>
 Tests initial settings retrieved from config file
 </summary>
	<param name="InpDict"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.LoadMgrSettingsFromDB">
	<summary>
 Gets remaining manager config settings from config database; 
 Overload to use module-level string dictionary when calling from external method
 </summary>
	<returns>True for success; False for error</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.LoadMgrSettingsFromDB(System.Collections.Specialized.StringDictionary@)">
	<summary>
 Gets remaining manager config settings from config database
 </summary>
	<param name="MgrSettingsDict">String dictionary containing parameters that have been loaded so far</param>
	<returns>True for success; False for error</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.GetParam(System.String,System.String)">
	<summary>
 Gets a parameter from the parameters string dictionary
 </summary>
	<param name="ItemKey">Key name for item</param>
	<returns>String value associated with specified key</returns>
	<remarks>Returns Nothing if key isn't found</remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.GetParam(System.String,System.Int32)">
	<summary>
 Gets a parameter from the parameters string dictionary
 </summary>
	<param name="ItemKey">Key name for item</param>
	<returns>String value associated with specified key</returns>
	<remarks>Returns Nothing if key isn't found</remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.GetParam(System.String)">
	<summary>
 Gets a parameter from the parameters string dictionary
 </summary>
	<param name="ItemKey">Key name for item</param>
	<returns>String value associated with specified key</returns>
	<remarks>Returns Nothing if key isn't found</remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.SetParam(System.String,System.String)">
	<summary>
 Sets a parameter in the parameters string dictionary
 </summary>
	<param name="ItemKey">Key name for the item</param>
	<param name="ItemValue">Value to assign to the key</param>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.GetAllKeys">
	<summary>
 Gets a collection representing all keys in the parameters string dictionary
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.WriteConfigSetting(System.String,System.String)">
	<summary>
 Writes specfied value to an application config file.
 </summary>
	<param name="Key">Name for parameter (case sensitive)</param>
	<param name="Value">New value for parameter</param>
	<returns>TRUE for success; FALSE for error (ErrMsg property contains reason)</returns>
	<remarks>This bit of lunacy is needed because MS doesn't supply a means to write to an app config file</remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.LoadConfigDocument">
	<summary>
 Loads an app config file for changing parameters
 </summary>
	<returns>App config file as an XML document if successful; NOTHING on failure</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.GetConfigFilePath">
	<summary>
 Specifies the full name and path for the application config file
 </summary>
	<returns>String containing full name and path</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.MgrSettings.clsMgrSettings.DbCStr(System.Object)">
	<summary>
 Converts a database output object that could be dbNull to a string
 </summary>
	<param name="InpObj"></param>
	<returns>String equivalent of object; empty string if object is dbNull</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsMainProcess.Main">
	<summary>
 Starts program execution
 </summary>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsMainProcess.InitMgr">
	<summary>
 Initializes the manager settings and classes
 </summary>
	<returns>True for success; False if error occurs</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsMainProcess.DoDirectoryScan">
	<summary>
 Do a directory scan
 </summary>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsMainProcess.GetAppPath">
	<summary>
 Returns the full path to the executing .Exe or .Dll
 </summary>
	<returns>File path</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsMainProcess.GetAppVersion">
	<summary>
 Returns the .NET assembly version followed by the program date
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DMS_InstDirScanner.clsLogTools.FileLogDebugEnabled">
	<summary>
 Tells calling program file debug status
 </summary>
	<returns>TRUE if debug level enabled for file logger; FALSE otherwise</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsLogTools.WriteLog(DMS_InstDirScanner.clsLogTools.LoggerTypes,DMS_InstDirScanner.clsLogTools.LogLevels,System.String)">
	<summary>
 Writes a message to the logging system
 </summary>
	<param name="LoggerType">Type of logger to use</param>
	<param name="LogLevel">Level of log reporting</param>
	<param name="InpMsg">Message to be logged</param>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsLogTools.WriteLog(DMS_InstDirScanner.clsLogTools.LoggerTypes,DMS_InstDirScanner.clsLogTools.LogLevels,System.String,System.Exception)">
	<summary>
 Overload to write a message and exception to the logging system
 </summary>
	<param name="LoggerType">Type of logger to use</param>
	<param name="LogLevel">Level of log reporting</param>
	<param name="InpMsg">Message to be logged</param>
	<param name="Ex">Exception to be logged</param>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsLogTools.ChangeLogFileName">
	<summary>
 Changes the base log file name
 </summary>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsLogTools.FindAppenders(System.String)">
	<summary>
 Gets the specified appender
 </summary>
	<param name="AppendName">Name of appender to find</param>
	<returns>List(IAppender) objects if found; NOTHING otherwise</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsLogTools.SetFileLogLevel(System.Int32)">
	<summary>
 Sets the file logging level via an integer value (Overloaded)
 </summary>
	<param name="InpLevel">Integer corresponding to level (1-5, 5 being most verbose</param>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsLogTools.SetFileLogLevel(DMS_InstDirScanner.clsLogTools.LogLevels)">
	<summary>
 Sets file logging level based on enumeration (Overloaded)
 </summary>
	<param name="InpLevel">LogLevels value defining level (Debug is most verbose)</param>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsLogTools.CreateFileAppender(System.String)">
	<summary>
 Creates and configures a file appender
 </summary>
	<param name="LogfileName">Base of log file to be used</param>
	<returns>A configured file appender</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsLogTools.CreateFileLogger(System.String,System.Int32)">
	<summary>
 Configures the file logger
 </summary>
	<param name="LogFileName">Base name for log file</param>
	<param name="LogLevel">Debug level for file logger</param>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsLogTools.CreateDbLogger(System.String,System.String)">
	<summary>
 Configures the Db logger
 </summary>
	<param name="ConnStr">Database connection string</param>
	<param name="ModuleName">Module name used by logger</param>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsLogTools.CreateDbAppender(System.String,System.String)">
	<summary>
 Creates a database appender
 </summary>
	<param name="ConnStr">Database connection string</param>
	<param name="ModuleName">Module name used by logger</param>
	<returns>ADONet database appender</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsLogTools.CreateLayout(System.String)">
	<summary>
 Creates a layout object for a Db appender parameter
 </summary>
	<param name="LayoutStr">Name of parameter</param>
	<returns></returns>
	<remarks>log4net.Layout.IRawLayout</remarks>
</member><member name="M:DMS_InstDirScanner.clsDirectoryTools.GetDirectoryData(DMS_InstDirScanner.clsInstData,System.IO.StreamWriter,DMS_InstDirScanner.MgrSettings.clsMgrSettings)">
	<summary>
 Query the files and folders on the instrument's shared data folder
 </summary>
	<param name="intrumentData"></param>
	<param name="swOutFile"></param>
	<param name="mgrSettings"></param>
	<returns>True on success, false if the target folder is not found</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsDirectoryTools.LogCriticalError(System.String)">
	<summary>
 Logs an error message to the local log file, unless it is currently between midnight and 1 am
 </summary>
	<param name="errorMessage"></param>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsDbTools.GetInstrumentList(DMS_InstDirScanner.MgrSettings.clsMgrSettings)">
	<summary>
 Gets a list of instruments and data paths from DMS
 </summary>
	<param name="MgrSettings">Manager params object</param>
	<returns>List(Of clsInstData) containing data for all active instruments</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsDbTools.LogErrorEvents">
	<summary>
 Reports database errors to local log
 </summary>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsDbTools.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
	<summary>
 Event handler for InfoMessage event
 </summary>
	<param name="sender"></param>
	<param name="args"></param>
	<remarks>Errors and warnings from SQL Server are caught here</remarks>
</member><member name="M:DMS_InstDirScanner.clsStatusFile.#ctor(System.String,System.Int32)">
	<summary>
 Constructor
 </summary>
	<param name="FileLocation">Full path to status file</param>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsStatusFile.ConvertMgrStatusToString(DMS_InstDirScanner.IStatusFile.EnumMgrStatus)">
	<summary>
 Converts the manager status enum to a string value
 </summary>
	<param name="StatusEnum">An IStatusFile.EnumMgrStatus object</param>
	<returns>String representation of input object</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsStatusFile.ConvertTaskStatusToString(DMS_InstDirScanner.IStatusFile.EnumTaskStatus)">
	<summary>
 Converts the task status enum to a string value
 </summary>
	<param name="StatusEnum">An IStatusFile.EnumTaskStatus object</param>
	<returns>String representation of input object</returns>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsStatusFile.ConvertTaskDetailStatusToString(DMS_InstDirScanner.IStatusFile.EnumTaskStatusDetail)">
	<summary>
 Converts the manager status enum to a string value
 </summary>
	<param name="StatusEnum">An IStatusFile.EnumTaskStatusDetail object</param>
	<returns></returns>
	<remarks>String representation of input object</remarks>
</member><member name="M:DMS_InstDirScanner.clsStatusFile.WriteStatusFile">
	<summary>
 Writes the status file
 </summary>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsStatusFile.UpdateAndWrite(System.Single)">
	<summary>
 Updates status file
 </summary>
	<param name="PercentComplete">Job completion percentage</param>
	<remarks>Overload to update when completion percentage is only change</remarks>
</member><member name="M:DMS_InstDirScanner.clsStatusFile.UpdateAndWrite(DMS_InstDirScanner.IStatusFile.EnumTaskStatusDetail,System.Single)">
	<summary>
 Updates status file
 </summary>
	<param name="Status">Job status enum</param>
	<param name="PercentComplete">Job completion percentage</param>
	<remarks>Overload to update file when status and completion percentage change</remarks>
</member><member name="M:DMS_InstDirScanner.clsStatusFile.UpdateAndWrite(DMS_InstDirScanner.IStatusFile.EnumTaskStatusDetail,System.Single,System.Int32)">
	<summary>
 Updates status file
 </summary>
	<param name="Status">Job status enum</param>
	<param name="PercentComplete">Job completion percentage</param>
	<param name="DTACount">Number of DTA files found for Sequest analysis</param>
	<remarks>Overload to provide Sequest DTA count</remarks>
</member><member name="M:DMS_InstDirScanner.clsStatusFile.UpdateStopped(System.Boolean)">
	<summary>
 Sets status file to show mahager not running
 </summary>
	<param name="MgrError">TRUE if manager not running due to error; FALSE otherwise</param>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsStatusFile.UpdateDisabled(System.Boolean)">
	<summary>
 Updates status file to show manager disabled
 </summary>
	<param name="Local">TRUE if manager disabled locally, otherwise FALSE</param>
	<remarks></remarks>
</member><member name="M:DMS_InstDirScanner.clsStatusFile.InitStatusFromFile">
	<summary>
 Initializes the status from a file, if file exists
 </summary>
	<remarks></remarks>
</member><member name="P:DMS_InstDirScanner.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:DMS_InstDirScanner.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:DMS_InstDirScanner.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
</members>
</doc>