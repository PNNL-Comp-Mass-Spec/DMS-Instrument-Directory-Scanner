<?xml version="1.0"?>
<doc>
<assembly>
<name>
DMS_InstDirScanner
</name>
</assembly>
<members>
<member name="T:DMS_InstDirScanner.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DMS_InstDirScanner.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DMS_InstDirScanner.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:DMS_InstDirScanner.clsDirectoryTools">
 <summary>
 Handles all directory access tasks
 </summary>
</member>
<member name="M:DMS_InstDirScanner.clsDirectoryTools.#ctor">
 <summary>
 Constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsDirectoryTools.GetDirectoryData(DMS_InstDirScanner.clsInstData,System.IO.TextWriter,DMS_InstDirScanner.IMgrParams)">
 <summary>
 Query the files and folders on the instrument's shared data folder
 </summary>
 <param name="intrumentData"></param>
 <param name="swOutFile"></param>
 <param name="mgrSettings"></param>
 <returns>True on success, false if the target folder is not found</returns>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsDirectoryTools.LogCriticalError(System.String)">
 <summary>
 Logs an error message to the local log file, unless it is currently between midnight and 1 am
 </summary>
 <param name="errorMessage"></param>
 <remarks></remarks>
</member>
<member name="T:DMS_InstDirScanner.clsInstData">
 <summary>
 Class to hold data for each instrument
 </summary>
</member>
<member name="T:DMS_InstDirScanner.clsLogTools">
 <summary>
 Class for handling logging via Log4Net
 </summary>
 <remarks>
 Call method CreateFileLogger to define the log file name
 </remarks>
</member>
<member name="F:DMS_InstDirScanner.clsLogTools.LOG_FILE_DATECODE">
 <summary>
 Date format for log file names
 </summary>
</member>
<member name="T:DMS_InstDirScanner.clsLogTools.LogLevels">
 <summary>
 Log levels
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsLogTools.LogLevels.DEBUG">
 <summary>
 Debug message
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsLogTools.LogLevels.INFO">
 <summary>
 Informational message
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsLogTools.LogLevels.WARN">
 <summary>
 Warning message
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsLogTools.LogLevels.ERROR">
 <summary>
 Error message
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsLogTools.LogLevels.FATAL">
 <summary>
 Fatal error message
 </summary>
</member>
<member name="T:DMS_InstDirScanner.clsLogTools.LoggerTypes">
 <summary>
 Log types
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsLogTools.LoggerTypes.LogFile">
 <summary>
 Log to a log file
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsLogTools.LoggerTypes.LogDb">
 <summary>
 Log to the database and to the log file
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsLogTools.LoggerTypes.LogSystem">
 <summary>
 Log to the system event log and to the log file
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsLogTools.m_FileLogger">
 <summary>
 File Logger (RollingFileAppender)
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsLogTools.m_DbLogger">
 <summary>
 Database logger
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsLogTools.m_SysLogger">
 <summary>
 System event log logger
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsLogTools.m_BaseFileName">
 <summary>
 Base log file name
 </summary>
 <remarks>This is updated by ChangeLogFileBaseName or CreateFileLogger</remarks>
</member>
<member name="P:DMS_InstDirScanner.clsLogTools.CurrentFileAppenderPath">
 <summary>
 File path for the current log file used by the FileAppender
 </summary>
 <returns>Log file path</returns>
</member>
<member name="P:DMS_InstDirScanner.clsLogTools.FileLogDebugEnabled">
 <summary>
 Tells calling program file debug status
 </summary>
 <returns>TRUE if debug level enabled for file logger; FALSE otherwise</returns>
 <remarks></remarks>
</member>
<member name="P:DMS_InstDirScanner.clsLogTools.MostRecentErrorMessage">
 <summary>
 Most recent error message
 </summary>
 <returns></returns>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.#ctor">
 <summary>
 Empty, private constructor to prevent instantiation
 </summary>
 <remarks>
 To simulate a static class in VB.NET, we use the NotInheritable keyword and include a private constructor
 </remarks>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.WriteLog(DMS_InstDirScanner.clsLogTools.LoggerTypes,DMS_InstDirScanner.clsLogTools.LogLevels,System.String)">
 <summary>
 Write a message to the logging system
 </summary>
 <param name="loggerType">Type of logger to use</param>
 <param name="logLevel">Level of log reporting</param>
 <param name="message">Message to be logged</param>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.WriteLog(DMS_InstDirScanner.clsLogTools.LoggerTypes,DMS_InstDirScanner.clsLogTools.LogLevels,System.String,System.Exception)">
 <summary>
 Write a message and exception to the logging system
 </summary>
 <param name="loggerType">Type of logger to use</param>
 <param name="logLevel">Level of log reporting</param>
 <param name="message">Message to be logged</param>
 <param name="ex">Exception to be logged</param>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.WriteLogWork(DMS_InstDirScanner.clsLogTools.LoggerTypes,DMS_InstDirScanner.clsLogTools.LogLevels,System.String,System.Exception)">
 <summary>
 Write a message and possibly an exception to the logging system
 </summary>
 <param name="loggerType">Type of logger to use</param>
 <param name="logLevel">Level of log reporting</param>
 <param name="message">Message to be logged</param>
 <param name="ex">Exception to be logged</param>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.ChangeLogFileBaseName(System.String)">
 <summary>
 Update the log file's base name
 </summary>
 <param name="baseName"></param>
 <remarks>Will append today's date to the base name</remarks>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.ChangeLogFileName">
 <summary>
  Changes the base log file name
 </summary>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.ChangeLogFileName(System.String)">
 <summary>
 Changes the base log file name
 </summary>
 <param name="relativeFilePath">Log file base name and path (relative to program folder)</param>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.FindAppenders(System.String)">
 <summary>
 Gets the specified appender
 </summary>
 <param name="appenderName">Name of appender to find</param>
 <returns>List(IAppender) objects if found; NOTHING otherwise</returns>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.SetFileLogLevel(System.Int32)">
 <summary>
 Sets the file logging level via an integer value (Overloaded)
 </summary>
 <param name="logLevel">Integer corresponding to level (1-5, 5 being most verbose</param>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.SetFileLogLevel(DMS_InstDirScanner.clsLogTools.LogLevels)">
 <summary>
 Sets file logging level based on enumeration (Overloaded)
 </summary>
 <param name="logLevel">LogLevels value defining level (Debug is most verbose)</param>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.ArchiveOldLogs(System.String)">
 <summary>
 Look for log files over 32 days old that can be moved into a subdirectory
 </summary>
 <param name="logFilePath"></param>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.CreateFileAppender(System.String)">
 <summary>
 Creates a file appender
 </summary>
 <param name="logFileNameBase">Base name for log file</param>
 <returns>A configured file appender</returns>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.CreateFileLogger(System.String,System.Int32)">
 <summary>
 Configures the file logger
 </summary>
 <param name="logFileNameBase">Base name for log file</param>
 <param name="logLevel">Debug level for file logger (1-5, 5 being most verbose)</param>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.CreateFileLogger(System.String,DMS_InstDirScanner.clsLogTools.LogLevels)">
 <summary>
 Configures the file logger
 </summary>
 <param name="logFileNameBase">Base name for log file</param>
 <param name="logLevel">Debug level for file logger </param>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.CreateDbLogger(System.String,System.String)">
 <summary>
 Configures the database logger
 </summary>
 <param name="connStr">Database connection string</param>
 <param name="moduleName">Module name used by logger</param>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.CreateDbAppender(System.String,System.String,System.String)">
 <summary>
 Creates a database appender
 </summary>
 <param name="connectionString">Database connection string</param>
 <param name="moduleName">Module name used by logger</param>
 <param name="appenderName">Appender name</param>
 <returns>ADONet database appender</returns>
</member>
<member name="M:DMS_InstDirScanner.clsLogTools.CreateLayout(System.String)">
 <summary>
 Creates a layout object for a Db appender parameter
 </summary>
 <param name="layoutStr">Name of parameter</param>
 <returns></returns>
</member>
<member name="T:DMS_InstDirScanner.clsLogTools.MessageLoggedEventHandler">
 <summary>
 Delegate for event MessageLogged
 </summary>
</member>
<member name="E:DMS_InstDirScanner.clsLogTools.MessageLogged">
 <summary>
 This event is raised when a message is logged
 </summary>
</member>
<member name="T:DMS_InstDirScanner.clsMainProcess">
 <summary>
 Master processing class
 </summary>
</member>
<member name="M:DMS_InstDirScanner.clsMainProcess.Main">
 <summary>
 Starts program execution
 </summary>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMainProcess.InitMgr">
 <summary>
 Initializes the manager settings and classes
 </summary>
 <returns>True for success; False if error occurs</returns>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMainProcess.DoDirectoryScan">
 <summary>
 Do a directory scan
 </summary>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMainProcess.GetAppPath">
 <summary>
 Returns the full path to the executing .Exe or .Dll
 </summary>
 <returns>File path</returns>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMainProcess.GetAppVersion">
 <summary>
 Returns the .NET assembly version followed by the program date
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DMS_InstDirScanner.MessageSenderDelegate">
 <summary>
 Delegate that does the eventual posting
 </summary>
 <param name="message"></param>
</member>
<member name="T:DMS_InstDirScanner.clsMessageSender">
 <summary>
 Sends messages to ActiveMQ message broker using NMS client library
 </summary>
</member>
<member name="T:DMS_InstDirScanner.clsMgrSettings">
 <summary>
 Class for loading, storing and accessing manager parameters.
 </summary>
 <remarks>
 Loads initial settings from local config file, then checks to see if remainder of settings should be
 loaded or manager set to inactive. If manager active, retrieves remainder of settings from manager
 parameters database.
 </remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.#ctor">
 <summary>
 Constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.LoadSettings">
 <summary>
 Loads manager settings from config file and database
 </summary>
 <returns>True if successful; False on error</returns>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.LoadMgrSettingsFromFile">
 <summary>
 Loads the initial settings from application config file
 </summary>
 <returns>String dictionary containing initial settings if suceessful; NOTHING on error</returns>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.CheckInitialSettings(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
 <summary>
 Tests initial settings retrieved from config file
 </summary>
 <param name="mgrParams"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.LoadMgrSettingsFromDB">
 <summary>
 Gets remaining manager config settings from config database;
 Overload to use module-level string dictionary when calling from external method
 </summary>
 <returns>True for success; False for error</returns>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.LoadMgrSettingsFromDB(System.Collections.Generic.Dictionary{System.String,System.String})">
 <summary>
 Gets remaining manager config settings from config database
 </summary>
 <param name="mgrSettings">String dictionary containing parameters that have been loaded so far</param>
 <returns>True for success; False for error</returns>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.GetParam(System.String,System.String)">
 <summary>
 Gets a parameter from the parameters string dictionary
 </summary>
 <param name="ItemKey">Key name for item</param>
 <returns>String value associated with specified key</returns>
 <remarks>Returns Nothing if key isn't found</remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.GetParam(System.String,System.Int32)">
 <summary>
 Gets a parameter from the parameters string dictionary
 </summary>
 <param name="ItemKey">Key name for item</param>
 <returns>String value associated with specified key</returns>
 <remarks>Returns Nothing if key isn't found</remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.GetParam(System.String)">
 <summary>
 Gets a parameter from the parameters string dictionary
 </summary>
 <param name="ItemKey">Key name for item</param>
 <returns>String value associated with specified key</returns>
 <remarks>Returns Nothing if key isn't found</remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.SetParam(System.String,System.String)">
 <summary>
 Sets a parameter in the parameters string dictionary
 </summary>
 <param name="ItemKey">Key name for the item</param>
 <param name="ItemValue">Value to assign to the key</param>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.GetAllKeys">
 <summary>
 Gets a collection representing all keys in the parameters string dictionary
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.WriteConfigSetting(System.String,System.String)">
 <summary>
 Writes specfied value to an application config file.
 </summary>
 <param name="Key">Name for parameter (case sensitive)</param>
 <param name="Value">New value for parameter</param>
 <returns>TRUE for success; FALSE for error (ErrMsg property contains reason)</returns>
 <remarks>This bit of lunacy is needed because MS doesn't supply a means to write to an app config file</remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.LoadConfigDocument">
 <summary>
 Loads an app config file for changing parameters
 </summary>
 <returns>App config file as an XML document if successful; NOTHING on failure</returns>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.GetConfigFilePath">
 <summary>
 Specifies the full name and path for the application config file
 </summary>
 <returns>String containing full name and path</returns>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsMgrSettings.DbCStr(System.Object)">
 <summary>
 Converts a database output object that could be dbNull to a string
 </summary>
 <param name="InpObj"></param>
 <returns>String equivalent of object; empty string if object is dbNull</returns>
 <remarks></remarks>
</member>
<member name="T:DMS_InstDirScanner.clsStatusData">
 <summary>
 Class to hold long-term data for status reporting.
 This is a hack to avoid adding an instance of the status file class to the log tools class
 </summary>
</member>
<member name="T:DMS_InstDirScanner.clsStatusFile">
 <summary>
 Provides tools for creating and updating an analysis status file
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_FileNamePath">
 <summary>
 Status file name and location
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_MgrName">
 <summary>
 Manager name
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_MgrStatus">
 <summary>
 Manager status
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_MgrStartTime">
 <summary>
 Manager start time
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_CpuUtilization">
 <summary>
 CPU utilization
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_Tool">
 <summary>
 Analysis Tool
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_TaskStatus">
 <summary>
 Task status
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_Duration">
 <summary>
 Task duration
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_Progress">
 <summary>
 Progess (in percent)
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_CurrentOperation">
 <summary>
 Current operation
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_TaskStatusDetail">
 <summary>
 Task status detail
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_JobNumber">
 <summary>
 Job number
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_JobStep">
 <summary>
 Job step
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_Dataset">
 <summary>
 Dataset name
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_MostRecentJobInfo">
 <summary>
 Most recent job info
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_SpectrumCount">
 <summary>
 Number of spectrum files created
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_MessageQueueURI">
 <summary>
 Message broker connection string
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_MessageQueueTopic">
 <summary>
 Broker topic for status reporting
 </summary>
</member>
<member name="F:DMS_InstDirScanner.clsStatusFile.m_LogToMessageQueue">
 <summary>
 Flag to indicate if status should be logged to broker in addition to a file
 </summary>
</member>
<member name="M:DMS_InstDirScanner.clsStatusFile.#ctor(System.String,System.Int32)">
 <summary>
 Constructor
 </summary>
 <param name="fileLocation">Full path to status file</param>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsStatusFile.ConvertMgrStatusToString(DMS_InstDirScanner.IStatusFile.EnumMgrStatus)">
 <summary>
 Converts the manager status enum to a string value
 </summary>
 <param name="StatusEnum">An IStatusFile.EnumMgrStatus object</param>
 <returns>String representation of input object</returns>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsStatusFile.ConvertTaskStatusToString(DMS_InstDirScanner.IStatusFile.EnumTaskStatus)">
 <summary>
 Converts the task status enum to a string value
 </summary>
 <param name="StatusEnum">An IStatusFile.EnumTaskStatus object</param>
 <returns>String representation of input object</returns>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsStatusFile.ConvertTaskDetailStatusToString(DMS_InstDirScanner.IStatusFile.EnumTaskStatusDetail)">
 <summary>
 Converts the manager status enum to a string value
 </summary>
 <param name="StatusEnum">An IStatusFile.EnumTaskStatusDetail object</param>
 <returns></returns>
 <remarks>String representation of input object</remarks>
</member>
<member name="M:DMS_InstDirScanner.clsStatusFile.WriteStatusFile">
 <summary>
 Writes the status file
 </summary>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsStatusFile.UpdateAndWrite(System.Single)">
 <summary>
 Updates status file
 </summary>
 <param name="PercentComplete">Job completion percentage</param>
 <remarks>Overload to update when completion percentage is only change</remarks>
</member>
<member name="M:DMS_InstDirScanner.clsStatusFile.UpdateAndWrite(DMS_InstDirScanner.IStatusFile.EnumTaskStatusDetail,System.Single)">
 <summary>
 Updates status file
 </summary>
 <param name="Status">Job status enum</param>
 <param name="PercentComplete">Job completion percentage</param>
 <remarks>Overload to update file when status and completion percentage change</remarks>
</member>
<member name="M:DMS_InstDirScanner.clsStatusFile.UpdateAndWrite(DMS_InstDirScanner.IStatusFile.EnumTaskStatusDetail,System.Single,System.Int32)">
 <summary>
 Updates status file
 </summary>
 <param name="Status">Job status enum</param>
 <param name="PercentComplete">Job completion percentage</param>
 <param name="DTACount">Number of DTA files found for Sequest analysis</param>
 <remarks>Overload to provide Sequest DTA count</remarks>
</member>
<member name="M:DMS_InstDirScanner.clsStatusFile.UpdateStopped(System.Boolean)">
 <summary>
 Sets status file to show mahager not running
 </summary>
 <param name="MgrError">TRUE if manager not running due to error; FALSE otherwise</param>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsStatusFile.UpdateDisabled(System.Boolean)">
 <summary>
 Updates status file to show manager disabled
 </summary>
 <param name="Local">TRUE if manager disabled locally, otherwise FALSE</param>
 <remarks></remarks>
</member>
<member name="M:DMS_InstDirScanner.clsStatusFile.InitStatusFromFile">
 <summary>
 Initializes the status from a file, if file exists
 </summary>
 <remarks></remarks>
</member>
<member name="T:DMS_InstDirScanner.IStatusFile">
 <summary>
 Interface used by classes that create and update analysis status file
 </summary>
</member>
</members>
</doc>
